4)
//Напишите программу, выводящую па экран ваше любимое стихотворение. Для разбиения на строчки используйте подходящую управляющую последовательность.
#include <iostream>
using namespace std;

int main(){
    cout << "Эдуард Асадов"<< endl<< endl;
    cout << "Когда на лице твоем холод и скука," << endl <<"Когда ты живешь в раздраженье и споре,"<< endl << "Ты даже не знаешь, какая ты мука," << endl<< "И даже не знаешь, какое ты горе." << endl << endl << "Когда ж ты добрее, чем синь в поднебесье," << endl << "А в сердце и свет, и любовь, и участье," << endl<< "Ты даже не знаешь, какая ты песня," << endl<< "И даже не знаешь, какое ты счастье!";
}

5)
/*5. Библиотечная функция islower() принимает в качестве 
аргумента один символ (букву) и возвращает ненулевое
целое значение в том случае, если буква является строчной, 
и нулевое, если буква является заглавной. Описание функции хранится в файле CTYPE.H.
Напишите программу, которая принимает букву от пользователя, а затем выводит нулевое
или ненулевое значение в зависимости от того, является ли буква строчной или нет.*/
#include <iostream>
#include <ctype.h>
using namespace std;

int main(){
    char a; 
    cout << "Введите заглавную или строчную букву: ";
    cin >> a;
    cout << islower(a);
    return 0;
}

6)
/*6. На биржевых торгах за 1 фунт стерлингов давали $1.487, за франк — $0.172. 
за немецкую марку — $0.584, а за японскую йену — $0.00955. 
Напишите программу, которая запрашивает денежную сумму в долларах, 
а затем выводит эквивалентные суммы в других валютах. */

#include <iostream>
using namespace std;

int main(){
    double d=0.0, s=0.0, f=0.0, m=0.0, y=0.0;
    cout << "Введите денежную сумму в долларах: ";
    cin >> d;
    s = d/1.487;
    f = d/0.172;
    m = d/0.584;
    y = d/0.00955;
    cout << "Эквивалентые " << d << "$ суммы в других валютах: \nФунты стерлингов: " << s << "\nФранкb: " << f << "\nНемецкие марки: " << m << "\nЯпонские йены: " << y; 
}

7)
/*7. Температуру, измеренную в градусах по Цельсию, можно перевести в градусы по Фаренгейту путем 
умножения на 9/5 и сложения с числом 32. Напишите программу, запрашивающую температуру 
в градусах по Цельсию и отображающую ее эквивалент по Фаренгейту. */
#include <iostream>
using namespace std;

int main(){
    double a, b; 
    cout << "Введите температуру в градусах по Цельсию: ";
    cin >> a;
    b = a*9/5+32;
    cout << "Эквивалент " << a << "° по Цельсию в градусах по Фаренгейту: " << b << "°";
}

8)
/*8. Когда размер величины, выводимой на экран с помощью манипулятора setw(),
оказывается меньше размера зарезервированного поля, по умолчанию незаполненные поля 
заполняются пробелами. Манипулятор setfill() принимает в качестве аргумента один символ,
который замещает все пробелы на незаполненных позициях поля. Модифицируйте пример 2 так,
чтобы символы, разделяющие пары значений из столбцов, были не пробелами, а точками, например 
Москва........ 8425785  */
#include <iostream>
#include <iomanip>
using namespace std; 

int main(){ 
   cout << 1990 << setw(8) << setfill('.') << 135 << endl << 1991 << setw(8) << 7290 << endl << 1992 << setw(8) << 11300 << endl << 1993 << setw(8) << 16200 << endl;
   return 0; 
} 

9)

/*9. Две дроби а/b и c/d можно сложить следующим образом:  a/b + c/d = (a*d + b*c)/(b*d)  
Например, 1/4 + 2/3 = (1*3 + 4*2)/4*3 = 11/12  
Напишите программу, запрашивающую у пользователя значения двух дробей, а затем выводящую результат, также записанный в форме дроби. 
Взаимодействие программы с пользователем может выглядеть, например, следующим образом:  
Введите первую дробь: 1/2 Введите вторую дробь: 2/5  Сумма равна 9/10 
Вы можете использовать тот факт, что операция извлечения >> может считывать более одного значения за раз: cin >> а >> dummychar >> b;*/
#include <iostream>
#include <iomanip>
using namespace std; 

int main(){ 
   int a,b,c,d,v,n;
   char e;
   cout << "Введите первую дробь: ";
   cin >> a >> e >> b;
   cout << "Введите вторую дробь: ";
   cin >> c >> e >> d;
   v = (a*d+b*c);
   n = b*d;
   cout << "Сумма дробей равна: " << v << "/" << n;
} 

10)
/*10.  Устаревшая денежная система Великобритании состояла из фунтов, шил лингов и пенсов. 
1 фунт был равен 20 шиллингам, а 1 шиллинг — 12 пенсам.
Для записи использовалась система, состоящая из знака £ и трехдесятичных значений, разделенных точками.
Например, запись £5.2.8 обозна чала 5 фунтов, 2 шиллинга и 8 пенсов (пенс — множественное число от пенни).
Современная денежная система, принятая в 50-е годы XX века,
состоит только из фунтов и пенсов, причем один фунт равен 100 пенсам. Такой фунт называют десятичным.
Таким образом, в новой денежной системе указанная сумма будет обозначаться как £5.13 (если быть точнее, £5.1333333).
Напишите программу, которая будет преобразовывать сумму, записанную в старом формате (фунты, шиллинги, пенсы),
в новый формат (фунты, пенсы). Форматом взаимодействия программы с пользо вателем может являться следующий:  
Введите количество фунтов: 7 
Заедите количество шиллингов: 17  
Введите количество пенсов: 9  Десятичных фунтов:  £7.89  
В большинстве компиляторов для представления знака £ используется десятичный код 156. 
Некоторые компиляторы позволяют скопировать знак фунта прямо из таблицы символов Windows. */
#include <iostream>
#include <iomanip>
using namespace std; 

int main(){ 
   int f,s,p;
   double a=0.0;
   cout << "Введите количество фунтов: ";
   cin >> f;
   cout << "Введите количество шиллингов: ";
   cin >> s;
   cout << "Введите количество пенсов: ";
   cin >> p;
   a = f+(s*12+p)/240.0;
   cout << "Десятичных фунтов: £" << a;
} 

11)
/*11. По умолчанию форматирование вывода производится по правому краю поля. 
Можно изменить форматирование текста на левостороннее путем использования манипулятора 
setiosflags(ios::left) (не беспокойтесь о смысле новой формы записи, встретившейся в манипуляторе).
Используйте этот манипулятор вместе с setw() для того, чтобы произвести следующий вывод:  

        Фамилия     Имя           Адрес                    Город  

      Петров      Василий         Кленовая 16         Санкт-Петербург  

      Иванов      Сергей           Осиновая 3           Находка  

        Сидоров     Иван          Березовая 21         Калининград  */
#include <iostream>
#include <iomanip>
using namespace std; 

int main(){ 
    cout<<setiosflags(ios::left)<<setw(20)<<"Фамилия"<<setw(20)<<"Имя"<<setw(20)<<"Адрес"<<setw(15)<<"Город"<<endl;
    cout<<setiosflags(ios::left)<<setw(19)<<"Петров"<<setw(24)<<"Василий"<<setw(23)<<"Кленовая 16"<<setw(15)<<"Санкт-Петербург"<<endl;
    cout<<setiosflags(ios::left)<<setw(19)<<"Иванов"<<setw(23)<<"Сергей"<<setw(23)<<"Осиновая 3"<<setw(15)<<"Находка"<<endl;
    cout<<setiosflags(ios::left)<<setw(20)<<"Сидоров"<<setw(21)<<"Иван"<<setw(24)<<"Березовая 21"<<setw(15)<<"Калининград"<<endl;
} 

12)
/*12.Напишите программу, выполняющую действия, обратные тем, которые описаны в упражнении 10, 
то есть запрашивающую у пользователя сумму, указанную в десятичных фунтах, и переводящую ее в старую систему  
фунтов, шиллингов и пенсов. Пример взаимодействия программы с пользователе может выглядеть так:  
Введите число десятичных фунтов: 3.51   
Эквивалентная сумма в старой форме записи: £3.10.2
Обратите внимание на то, что если вам придется присваивать вещественное значение (например, 12,34)
переменной целого типа, то его дробная часть (0,34) будет потеряна, а целая переменная получит значение 12. 
Чтобы избежать предупреждения со стороны компилятора, используйте явное преобразование типов. 
Можно использовать операторы, подобные приведенным ниже:  

    float decpounds:       // сумма в десятичных фунтах int

     pounds:       // сумма в старых фунтах float decfrac:

        // десятичная дробная часть  pounds = static_cast<int>(decpounds): //отбрасывание  

//дробной части  

decfrac = decpounds - pounds;                   //прибавление дробной части  

Чтобы получить число шиллингов, следует умножить на 20 значение переменной decfrac. Аналогичным образом можно получить число пенсов.*/
#include <iostream>
using namespace std; 

int main(){
    double f, p, p1, p2, a, b, s;
    cout << "Введите число десятичных фунтов: ";
    cin >> f;    
    p1 = f * 240;
    f = static_cast<int>(f);
    p2 = f * 240;
    a = p1 - p2;
    a = static_cast<int>(a);
    s = a/12;
    s = static_cast<int>(s);
    b = s * 12;
    p = a - b;
    cout << "Эквивалентная сумма в старой форме записи: £" << f << "." << s << "." << p << endl;
    return 0;
} 
