#include <iostream>
#include <iomanip>
#include <cstring>
using namespace std;

const int len = 7;

void zadanie(int a){
    cout << endl << "Задание №" << a << endl;
}

void addarrays(float* a, float* a2, float* a3, int len){
    for (int i = 0; i < len; i++)*(a3 + i) = *(a + i) + *(a2 + i);
}

int strcmp(const char* kos1, const char* kos2){
    for (int i = 0; i < strlen(kos1); i++){
        if (*(kos1 + i) == *(kos2 + i)) continue;
        return *(kos1 + i) > * (kos2 + i) ? 1 : -1;
    }
    return 0;
}

class human{
    protected:
    string surname;
    float payment;
    public:
    void input(){
        cout << "Укажите фамилию: "; cin >> surname;
        cout << "Укажите зарплату: "; cin >> payment;
    }
    void output(){
        cout << endl << surname << " " << payment;
    }
    string getName(){
        return surname;
    }
    float input_money(){
        return payment;
    }
};

void salsort(human** pp, int n){
    for (int i = 0; i < n; i++)
    for (int j = 0; j < n - i - 1; j++)
    if ((*(pp + j))->input_money() > (*(pp + j + 1))->input_money()){
        human* kos = *(pp + j);
        *(pp + j) = *(pp + j + 1);
        *(pp + j + 1) = kos;
    }
}

struct link{
    int data;
    link* next;
};

class linklist{
    private:
    link* first;
    public:
    linklist(){
        first = NULL;
    }
    void additem(int d);
    void display();
};

void linklist::additem(int d){
    link* newlink = new link;
    newlink->data = d;
    newlink->next = NULL;
    if (first != NULL){
        link* current = first;
        while (current->next != NULL){
        current = current->next;
        }
        current->next = newlink;
    }
    else first = newlink;
}

void linklist::display(){
    link* current = first;
    while (current != NULL){
        cout << current->data << endl;
        current = current->next;
    }
}

void z5(){
    zadanie(5);
    float a[len], a2[len], a3[len];
    for (int i = 0; i < len; i++){
        *(a + i) = i * i - i * 2.4;
        cout << setw(12) << *(a + i) << " ";
    }
    cout << endl;
    for (int i = 0; i < len; i++){
        *(a2 + i) = i * 5 / 2.3;
        cout << setw(12) << *(a2 + i) << " ";
    }
    cout << endl;
    addarrays(a, a2, a3, len);
    for (int i = 0; i < len; i++)
    cout << setw(12) << *(a3 + i) << " ";
    cout << endl;
}

void z6(){
    zadanie(6);
    const char* po1 = "kos";
    const char* po2 = "kos1";
    const char* po3 = "Akos";
    const char* po4 = "akos";
    const char* po5 = "akos";
    cout << strcmp(po1, po2) << endl;
    cout << strcmp(po1, po3) << endl;
    cout << strcmp(po3, po4) << endl;
    cout << strcmp(po4, po5) << endl;
}

void z7(){
    zadanie(7);
    setlocale(LC_ALL, "");
    human* op[200];
    int n = 0;
    char choice;
    do{
        op[n] = new human;
        op[n]->input();
        n++;
        cout << "Хотите указать еще одного сотрудника? ('y' or 'n')";
        cin >> choice;
    } 
    while (choice == 'y');
    cout << "\n" << "Вы указали сотрудников: ";
    for (int j = 0; j < n; j++){
        op[j]->output();
    }
    cout << endl;
    salsort(op, n);
    cout << "\n" << "Отсортированный список: ";
    for (int j = 0; j < n; j++){
        op[j]->output();
    }
    cout << endl;
}

void z8(){
    linklist li;
    li.additem(25);
    li.additem(36);
    li.additem(49);
    li.additem(64);
    li.display();
}

int main(){
    z5(); z6(); z7(); z8();
}
