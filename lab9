#include <iostream>
#include <iomanip>
#include <cstring>
using namespace std;

const int len = 7;

const int leng = 100;
float cash[leng];
int upcash = 0;
int a[leng];
int highcash = 0;


void zadanie(int a){ //объявление номера задания
    cout << endl << "Задание №" << a << endl;
}

//для задания 5
void addarrays(float* a, float* a2, float* a3, int len){
    for (int i = 0; i < len; i++){ //складываем значения 1 и 2 массивов
        *(a3 + i) = *(a + i) + *(a2 + i);
    }
}

//для задания 6
int strcmp(const char* s1, const char* s2){
    for (int i = 0; i < strlen(s1); i++){
        if (*(s1 + i) == *(s2 + i)){
            continue;
        }
        return *(s1 + i) > * (s2 + i) ? 1 : -1;
    }
    return 0;
}

//для задания 7
class human{
    protected:
    string name;
    float payment;
    public:
    void input(){
        cout << "Введите имя сотрудника: "; cin >> name;
        cout << "Введите зарплату: "; cin >> payment;
    }
    void output(){
        cout << endl << name << " " << payment;
    }
    string getName(){
        return name;
    }
    float input_money(){
        return payment;
    }
};

void salsort(human** pp, int n){
    for (int i = 0; i < n; i++)
    for (int j = 0; j < n - i - 1; j++)
    if ((*(pp + j))->input_money() > (*(pp + j + 1))->input_money()){
        human* s = *(pp + j);
        *(pp + j) = *(pp + j + 1);
        *(pp + j + 1) = s;
    }
}

//для задания 8
struct link{
    int data;
    link* next;
};

class linklist{
    private:
    link* first;
    public:
    linklist(){
        first = NULL;
    }
    void additem(int d);
    void display();
};

void linklist::additem(int d){
    link* newlink = new link;
    newlink->data = d;
    newlink->next = NULL;
    if (first != NULL){
        link* current = first;
        while (current->next != NULL){
        current = current->next;
        }
        current->next = newlink;
    }
    else {
        first = newlink;
    }
}

void linklist::display(){
    link* current = first;
    while (current != NULL){
        cout << current->data << endl;
        current = current->next;
    }
}

//для задания 11
class getmassif{
    private:
    int* b[10];
    public:
    getmassif(){
        for (int i = 0; i < 10; i++)
        *(b + i) = new int[10];
    }
    int& operator[](int ind){
        return *(*(b + ind / 10) + ind % 10);
    }
};

//для задания 12
class Float{
    private:
    int plus;
    public:
    Float(float value){
        plus = upcash;
        cash[upcash++] = value;
    }
    int operator&(){
        return plus;
    }
};

class speFloat{
    private:
    int addr;
    public:
    speFloat(int ptr){
        addr = highcash;
        a[highcash++] = ptr;
    }
    float& operator*(){
        return cash[a[addr]];
    }
};

//задание 5
void z5(){
    zadanie(5);
    float a[len], a2[len], a3[len];
    cout << "Первый массив: ";
    for (int i = 0; i < len; i++){ //выводим первый массив
        *(a + i) = i * i - i * 2.4;
        cout << setw(12) << *(a + i) << " ";
    }
    cout << endl;
    cout << "Второй массив: ";
    for (int i = 0; i < len; i++){ //выводим второй массив
        *(a2 + i) = i * 5 / 2.3;
        cout << setw(12) << *(a2 + i) << " ";
    }
    cout << endl;
    addarrays(a, a2, a3, len);
    cout << "Третий массив: ";
    for (int i = 0; i < len; i++){ //выводим третий массив
        cout << setw(12) << *(a3 + i) << " ";
    }
    cout << endl;
}

//задание 6
void z6(){
    zadanie(6);
    const char* s1 = "hi";
    const char* s2 = "hi";
    const char* s3 = "Ahi";
    cout << "Случай с одинаковыми значениями: " << strcmp(s1, s2) << endl;
    cout << "Вторая строка первая по алфавиту: " << strcmp(s1, s3) << endl;
    cout << "Первая строка первая по алфавиту: " << strcmp(s3, s1) << endl;
}

//задание 7
void z7(){
    zadanie(7);
    setlocale(LC_ALL, "");
    human* op[200];
    int n = 0;
    char choice;
    do{
        op[n] = new human;
        op[n]->input();
        n++;
        cout << "Еще один сотрудник? (y/n)";
        cin >> choice;
    } 
    while (choice == 'y');
    cout << "\n" << "Вы указали: ";
    for (int j = 0; j < n; j++){
        op[j]->output();
    }
    cout << endl;
    salsort(op, n);
    cout << "\n" << "Отсортированный список сотрудников: ";
    for (int j = 0; j < n; j++){
        op[j]->output();
    }
    cout << endl;
}

//задание 8
void z8(){
    zadanie(8);
    linklist li;
    li.additem(25);
    li.additem(36);
    li.additem(49);
    li.additem(64);
    li.display();
}

//задание 9
void z9(){
    zadanie(9);
    int i, j;
    int a1[10], a2[10], a3[10], a4[10], a5[10]; //вводим 10 массивов
    int a6[10], a7[10], a8[10], a9[10], a10[10];
    int* arr[] = { a1, a2, a3, a4, a5, a6, a7, a8, a9, a10 }; //10 указателей
    for ( i = 0; i < 10; i++){
        for (int j = 0; j < 10; j++){
            arr[i][j] = i * j;
        }
    }
    for (i = 0; i < 10; i++, cout << endl){
        for (j = 0; j < 10; j++, cout << " "){
            cout << setw(4) << arr[i][j];
        }
    }
}

//задание 10
void z10(){
    zadanie(10);
    int i,j;
    int* a[10];
    for ( i = 0; i < 10; i++){ //вводим 10 массивов
        *(a + i) = new int[10]; //по 10 чисел в каждом
        for (j = 0; j < 10; j++){
            *(*(a + i) + j) = i * j;
        }
    }
    for (i = 0; i < 10; i++, cout << endl){
        for (j = 0; j < 10; j++, cout << " "){
            cout << setw(4) << *(*(a + i) + j);
        }
    }
}

//задание 11
void z11(){
    zadanie(11);
    getmassif a;
    for (int i = 0; i < 100; i++){
        a[i] = i;
    }
    for (int i = 0; i < 100; i++){
        cout << (i % 10 == 0 ? "\n" : " ") << setw(4) << a[i];
    }
    cout << endl;
}

//задание 12
void z12(){
    zadanie(12);
    Float a = -1.234f; // определяем и инициализируем
    Float b = 5.678f;
    speFloat a2 = &b;
    speFloat b2 = &a;
    cout << "*ptrl = " << *b2 << endl; //получаем значения переменных
    cout << "*ptr2 = " << *a2 << endl; 
    *b2 = 7.123f; // присваиваем новые значения переменным через указатели
    *a2 = 8.456f; 
    cout << "*ptrl = " << *b2 << endl; //получаем значения
    cout << "*ptr2 = " << *a2 << endl;
}

int main(){
    z5(); z6(); z7(); z8(); z9(); z10(); z11(); z12();
}
