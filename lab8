#include <iostream>
#include <string>
#include <cstring>

using namespace std;

const int LIMIT = 100;
const int LEN = 80; //максимальная длина

void zadanie(int a){
    cout << "Задание №" << a << endl;
}

//для задания 4
class Publication{
    protected:
    string name;
    float price;
    public:
    void set(){
        cout << "Введите название книги: "; getline(cin, name);
        cout << "Введите ее цену: "; cin >> price;
    }
    void get(){
        cout << "Название книги: \"" << name << "\"\n"
        << "Цена книги: " << price << endl;
    }
};

class Disk : public Publication{
    protected:
    enum type_of_disk { CD, DVD };
    int type;
    public:
    void set_for_disk(){
        char s;
        set();
        cout << "Тип диска (c(CD) или d(DVD)): "; cin >> s;
        switch (s){
            case 'c': type = CD; break;
            case 'd': type = DVD; break;
            default:
            cout << "Ошибка! Введите данные заново" << endl;
            cin.get();
            set_for_disk();
            break;
        }
    }
    void get_for_disk(){
        get();
        cout << "Тип диска: ";
        switch (type){
            case CD: cout << "CD\n"; break;
            case DVD: cout << "DVD\n"; break;
        }
    }
};

//для задания 5
class Employee{
    protected:
    string name;
    unsigned int number;
    public:
    void set(){
        cout << "Введите имя сотрудника: "; cin >> name;
        cout << "Введите номер сотрудника: "; cin >> number;
    }
    void get(){
        cout << "Имя сотрудника: " << name << endl;
        cout << "Номер сотрудника: " << number << endl;
    }
};

class Employee_ver2 : public Employee{
    protected:
    enum period { hourly, weekly, monthly };
    period per;
    double compensation;
    public:
    void set_ver2(){
        char s;
        set();
        cout << "Введите зарплату сотрудника: "; cin >> compensation;
        cout << "Введите период оплаты работы сотрудника (h(по часам), w(по неделям) или m(по месяцам): "; 
        cin >> s;
        switch (s){
            case 'h': per = hourly; break;
            case 'w': per = weekly; break;
            case 'm': per = monthly; break;
            default:
            cout << "Ошибка! Введите данные заново\n";
            cin.get();
            set_ver2();
            break;
        }
    }
    void get_ver2(){
        get();
        cout << "Зарплата сотрудника: " << compensation << endl;
        cout << "Период оплаты работы сотрудника: ";
        switch (per){
            case hourly: cout << "почасовая\n"; break;
            case weekly: cout << "понедельная\n"; break;
            case monthly: cout << "помесячная\n"; break;
        }
    }
};

//для задания 6
class Safearay{
    protected:
    int arr[LIMIT];
    public:
    int& operator[](int n){
        if (n < 0 || n >= LIMIT){
            cout << "\nВыход за границы\n";
            exit(1);
        }
        return arr[n];
    }
};

class Safearay_ver2 : public Safearay{
    protected:
    unsigned int count;
    public:
    Safearay_ver2(){
        int bottom_bound = 0, upper_bound = 0;
        cout << "Введите нижнюю границу: "; cin >> bottom_bound;
        cout << "Введите верхнюю границу: "; cin >> upper_bound;
        if (upper_bound - bottom_bound <= LIMIT){
            count = upper_bound - bottom_bound;
        }
        else{
            for (;;){
                cout << "Ошибка! Границы введены неверно!\nВведите нижнюю границу: ";
                cin >> bottom_bound;
                cout << "Введите верхнюю границу: "; cin >> upper_bound;
                if (upper_bound - bottom_bound <= LIMIT){
                    cout << "Границы принимаются" << endl;
                    count = upper_bound - bottom_bound;
                    break;
                }
            }
        }
    }
    int bounds(){
        return count;
    }
};

//для задания 7
class Counter{
    protected:
    unsigned int count;
    public:
    Counter() : count(0) { }
    Counter(int c) : count(c) { }
    unsigned int get_count(){
        return count;
    }
    Counter operator++(){ //incr count (prefix)
        return Counter(++count);
    }
    Counter operator++(int){ //incr count (postfix)
        return Counter(++count);
    }
};

class CountDn : public Counter{
    public:
    CountDn() : Counter() { }
    CountDn(int c) : Counter(c) { }
    CountDn operator--(){ //decr count (prefix)
        return CountDn(--count);
    }
    CountDn operator--(int){ //decr count (postfix)
        return CountDn(--count);
    }
};

//для задания 8(задание 8)
class String{
    protected:
    enum { SZ = 80 };
    char str[SZ];
    public:
    String(){
        str[0] = '\0';
    }
    String(char s[]){
        strcpy(str, s);
    }
    void display() const{ //показать строку
        cout << str;
    }
    operator char* (){ //функция преобразования
        return str;
    }
};

class Pstring : public String{
public:
Pstring(char s[]); //конструктор
};

Pstring::Pstring(char s[]){ //конструктор для Pstring
    if (strlen(s) > SZ - 1){
        for (int j = 0; j < SZ - 1; j++)
        str[j] = s[j];
        str[SZ - 1] = '\0'; //не забываем про \0
    }
    else{ 
        String(s); 
    }
}

class Pstring2 : public Pstring{
    public:
    string left(unsigned int amount){
        string temp = "";
        for (int i = 0; i < amount; i++){
            temp += str[i];
        }
        return temp;
    }
    string right(unsigned int amount){
        string temp = "";
        int len = strlen(str);
        for (int i = len - amount; i < len; i++){
            temp += str[i];
        }
        return temp;
    }
    string mid(unsigned int amount, unsigned int elementary){
        string temp = "";
        for (int i = elementary - 1; i < elementary - 1 + amount; i++){
            temp += str[i];
        }
        return temp;
    }
};

//для задания 9
class Publication2 : public Publication{
    protected:
    string data_exit;
    public:
    void set_ver2(){
        set();
        cout << "Введите дату выхода книги: "; cin >> data_exit;
    }
    void get_ver2(){
        get();
        cout << "Дата выхода книги: " << data_exit << endl;
    }
};

class Book : public Publication2{
    protected:
    unsigned int amount;
    public:
    void set_Book(){
        set();
        set_ver2();
        cout << "Введите кол-во страниц: "; cin >> amount;
    }
    void get_Book(){
        get();
        get_ver2();
        cout << "Страниц в книге: " << amount << endl;
    }
};

class Type : public Publication2{
    protected:
    float amount_time;
    public:
    void set_for_type(){
        set();
        set_ver2();
        cout << "Введите время записи книги в минутах: "; cin >> amount_time;
    }
    void get_for_type(){
        get();
        get_ver2();
        cout << "Время записи книги в минутах: " << amount_time << endl;
    }
};

//для задания 10
class Student{
    private:
    char school[LEN]; // name of school or university
    char degree[LEN]; // highest degree earned
    public:
    void getedu(){
        cout << " Введите название школы или университета: "; cin >> school;
        cout << " Введите полученное образование: \n";
        cout << " (Highschool, Bachelor's, Master's, PhD): "; cin >> degree;
    }
    void putedu() const{
        cout << "\n Школа или университет: " << school;
        cout << "\n Полученное образование: " << degree;
    }
};

class employee{
    private:
    char name[LEN]; //employee name
    unsigned long number; //employee number
    public:
    void getdata(){
        cout << "\n Введите имя: "; cin >> name;
        cout << "Введите номер: "; cin >> number;
    }
    void putdata() const{
        cout << "\n Имя: " << name;
        cout << "\n Номер: " << number;
    }
};

class Manager : private employee, private Student{ //management
    private:
    char title[LEN]; //"vice-president" etc.
    double dues; //golf club dues
    public:
    void getdata(){
        employee::getdata();
        cout << " Введите звание: "; cin >> title;
        cout << " Введите взносы: "; cin >> dues;
        Student::getedu();
    }
    void putdata() const{
        employee::putdata();
        cout << "\n Звание: " << title;
        cout << "\n Взносы: " << dues;
        Student::putedu();
    }
};

class Executive : public Manager{
    protected:
    unsigned int bonus, amount;
    public:
    void getdata(){
        Manager::getdata();
        cout << " Введите размер годовой премии: "; cin >> bonus;
        cout << " Введите кол-во акций в компании: "; cin >> amount;
    }
    void putdata() const{
        Manager::putdata();
        cout << endl << "Размер годовой премии: " << bonus << endl
        << " Кол-во акций в компании: " << amount << endl;
    }
};

//для задания 11
struct pair_for_11{
int x, y;
};

class Stack{
    protected:
    enum { MAX = 10 }; // размер стека
    int st[MAX]; // данные, хранЯщиесЯ в стеке
    int top; // индекс последнего элемента в стеке
    public:
    Stack(){ // конструктор
    top = -1;
    }
    void push(int var){ // помещение числа в стек
    st[++top] = var;
    }
    int pop(){ // извлечение числа из стека
    return st[top--];
    }
};

class Stack2 : public Stack{
    public:
    void push(int var){ // помещение числа в стек
        if (top >= MAX - 1){ // если стек полон, то ошибка
            cout << "\nОшибка: стек полон"; exit(1);
        }
        Stack::push(var); // вызов функции push класса Stack
    }
    int pop(){ // извлечение числа из стека
        if (top < 0){ // если стек пуст, то ошибка
            cout << "\nОшибка: стек пуст\n"; exit(1);
        }
        return Stack::pop(); // вызов функции pop класса Stack
    }
};

class PairStack : public Stack2{
    public:
    void push(pair_for_11& temp_pair){
        Stack2::push(temp_pair.x);
        Stack2::push(temp_pair.y);
    }
    pair_for_11 pop(){
        pair_for_11 pf1;
        pf1.y = Stack2::pop();
        pf1.x = Stack2::pop();
        return pf1;
    }
};

//для задания 12
class Sterling{
    protected:
    long lb;
    int shilling, penalties;
    public:
    Sterling(){}
    //getSterLing();
    Sterling(double elementary){
        int temp = 0;
        temp = elementary * 240.0;
        lb = temp / 240.0;
        temp -= lb * 240;
        shilling = temp / 12.0;
        temp -= shilling * 12;
        penalties = temp;
        cout << "Эквивалентная сумма в старой форме записи: £" << lb << '.' << shilling
        << '.' << penalties << endl;
    }
    Sterling(long t_lb, int t_shilling, int t_penalties){
        lb = t_lb;
        shilling = t_shilling;
        penalties = t_penalties;
        cout << "Вы ввели: £" << lb << '.' << shilling << '.' << penalties << endl;
    }
    void getSterLing(){
        char sb = '0';
        cout << "Введите значение суммы в формате £X.YY.ZZ: ";
        cin >> sb >> lb >> sb >> shilling >> sb >> penalties;
        cout << "Вы ввели: £" << lb << '.' << shilling << '.' << penalties << endl;
    }
    void putSterling(){
        cout << "Сумма = £" << lb << '.' << shilling << '.' << penalties << endl;
    }
    void operator+(const Sterling& temp){
        long general = 0;
        general = (penalties + temp.penalties) + 12 * (shilling + temp.shilling) + 240 * (lb +
        temp.lb);
        long t_lb;
        int t_shilling, t_penalties;
        t_lb = general / 240;
        general -= t_lb * 240;
        t_shilling = general / 12;
        general -= t_shilling * 12;
        t_penalties = general;
        cout << "Сложение сумм = £" << t_lb << '.' << t_shilling << '.' << t_penalties <<
        endl;
    }
    void operator-(const Sterling& temp){
        long general = 0;
        general = (penalties - temp.penalties) + 12 * (shilling - temp.shilling) + 240 * (lb -
        temp.lb);
        long t_lb;
        int t_shilling, t_penalties;
        t_lb = general / 240;
        general -= t_lb * 240;
        t_shilling = general / 12;
        general -= t_shilling * 12;
        t_penalties = general;
        cout << "Сложение сумм = £" << t_lb << '.' << t_shilling << '.' << t_penalties <<
        endl;
    }
    void operator*(const double& t_double){
        double buffer = (lb * 240.0 + shilling * 12.0 + penalties) / 240.0;
        buffer *= t_double;
        cout << "Умножение суммы на число = ";
        long t_lb;
        int t_shilling, t_penalties, temp = 0;
        temp = buffer * 240.0;
        t_lb = temp / 240.0;
        temp -= t_lb * 240;
        t_shilling = temp / 12.0;
        temp -= t_shilling * 12;
        t_penalties = temp;
        cout << "£" << t_lb << '.' << t_shilling << '.' << t_penalties << endl;
    }
    void operator/(const double& t_double){
        double buffer = (lb * 240.0 + shilling * 12.0 + penalties) / 240.0;
        buffer /= t_double;
        cout << "Деление суммы на число = ";
        long t_lb;
        int t_shilling, t_penalties, temp = 0;
        temp = buffer * 240.0;
        t_lb = temp / 240.0;
        temp -= t_lb * 240;
        t_shilling = temp / 12.0;
        temp -= t_shilling * 12;
        t_penalties = temp;
        cout << "£" << t_lb << '.' << t_shilling << '.' << t_penalties << endl;
    }
    void operator/(const Sterling& t_sterling){
        double buffer_1 = (lb * 240.0 + shilling * 12.0 + penalties) / 240.0,
        buffer_2 = (t_sterling.lb * 240.0 + t_sterling.shilling * 12.0 +
        t_sterling.penalties) / 240.0;
        buffer_1 /= buffer_2;
        cout << "Деление суммы на сумму = ";
        long t_lb;
        int t_shilling, t_penalties, temp = 0;
        temp = buffer_1 * 240.0;
        t_lb = temp / 240.0;
        temp -= t_lb * 240;
        t_shilling = temp / 12.0;
        temp -= t_shilling * 12;
        t_penalties = temp;
        cout << "£" << t_lb << '.' << t_shilling << '.' << t_penalties << endl;
    }
};

class Sterfrac : public Sterling{
    protected:
    int num, den;
    public:
    void set(){
    char sb = '0';
        cout << "Введите значение суммы в формате £X.YY.ZZ-N/D: ";
        cin >> sb >> lb >> sb >> shilling >> sb >> penalties >> sb >> num >> sb >> den;
        cout << "Вы ввели: £" << lb << '.' << shilling << '.' << penalties << '-'
        << num << '/' << den << endl;
    }
    void get(){
        cout << "£" << lb << '.' << shilling << '.' << penalties << '-'
        << num << '/' << den << endl;
    }
    void add(const Sterfrac& sf){
        double total = (double)(penalties + sf.penalties) + (double)(12 * (shilling +
        sf.shilling))
        + (double)(240 * (lb + sf.lb)) + ((double)num / (double)den)
        + ((double)sf.num / (double)sf.den);
        long t_lb;
        int t_shilling, t_penalties;
        t_lb = total / 240;
        total -= t_lb * 240;
        t_shilling = total / 12;
        total -= t_shilling * 12;
        t_penalties = total;
        total -= t_penalties;
        cout << "Сложение сумм = £" << t_lb << '.' << t_shilling << '.' << t_penalties << '-';
        int i_total = total * 1000;
        switch (i_total){
            case 0: cout << "0/0" << endl; break;
            case (1000 / 8): cout << "1/8"; break;
            case (2000 / 8): cout << "2/8"; break;
            case (3000 / 8): cout << "3/8"; break;
            case (4000 / 8): cout << "4/8"; break;
            case (5000 / 8): cout << "5/8"; break;
            case (6000 / 8): cout << "6/8"; break;
            case (7000 / 8): cout << "7/8"; break;
        }
    }
    void sub(const Sterfrac& sf){
        double total = (double)(penalties - sf.penalties) + (double)(12 * (shilling -
        sf.shilling))
        + (double)(240 * (lb - sf.lb)) + (((double)num / (double)den)
        - ((double)sf.num / (double)sf.den));
        long t_lb;
        int t_shilling, t_penalties;
        t_lb = total / 240;
        total -= t_lb * 240;
        t_shilling = total / 12;
        total -= t_shilling * 12;
        t_penalties = total;
        total -= t_penalties;
        cout << "Разность сумм = £" << t_lb << '.' << t_shilling << '.' << t_penalties << '-';
        int i_total = total * 1000;
        switch (i_total){
            case 0: cout << "0/0" << endl; break;
            case (1000 / 8): cout << "1/8"; break;
            case (2000 / 8): cout << "2/8"; break;
            case (3000 / 8): cout << "3/8"; break;
            case (4000 / 8): cout << "4/8"; break;
            case (5000 / 8): cout << "5/8"; break;
            case (6000 / 8): cout << "6/8"; break;
            case (7000 / 8): cout << "7/8"; break;
        }
    }
    void mul(const Sterfrac& sf){
        double total_1 = (double)(penalties) + (double)(12 * shilling) + (double)(240 * lb)
        + ((double)num / (double)den);
        double total_2 = (double)(sf.penalties)+(double)(12 * sf.shilling) + (double)(240 *
        sf.lb)
        + ((double)sf.num / (double)sf.den);
        double total = total_1 * total_2;
        long t_lb;
        int t_shilling, t_penalties;
        t_lb = total / 240;
        total -= t_lb * 240;
        t_shilling = total / 12;
        total -= t_shilling * 12;
        t_penalties = total;
        total -= t_penalties;
        cout << "Умножение сумм = £" << t_lb << '.' << t_shilling << '.' << t_penalties <<
        '-';
        int i_total = total * 1000;
        switch (i_total){
            case 0: cout << "0/0" << endl; break;
            case (1000 / 8): cout << "1/8"; break;
            case (2000 / 8): cout << "2/8"; break;
            case (3000 / 8): cout << "3/8"; break;
            case (4000 / 8): cout << "4/8"; break;
            case (5000 / 8): cout << "5/8"; break;
            case (6000 / 8): cout << "6/8"; break;
            case (7000 / 8): cout << "7/8"; break;
        }
    }
    void div(const Sterfrac& sf){
        double total_1 = (double)(penalties)+(double)(12 * shilling) + (double)(240 * lb)
        + ((double)num / (double)den);
        double total_2 = (double)(sf.penalties) + (double)(12 * sf.shilling) + (double)(240 *
        sf.lb)
        + ((double)sf.num / (double)sf.den);
        double total = total_1 / total_2;
        long t_lb;
        int t_shilling, t_penalties;
        t_lb = total / 240;
        total -= t_lb * 240;
        t_shilling = total / 12;
        total -= t_shilling * 12;
        t_penalties = total;
        total -= t_penalties;
        cout << "Деление сумм = £" << t_lb << '.' << t_shilling << '.' << t_penalties << '-';
        int i_total = total * 1000;
        switch (i_total){
            case 0: cout << "0/0" << endl; break;
            case (1000 / 8): cout << "1/8"; break;
            case (2000 / 8): cout << "2/8"; break;
            case (3000 / 8): cout << "3/8"; break;
            case (4000 / 8): cout << "4/8"; break;
            case (5000 / 8): cout << "5/8"; break;
            case (6000 / 8): cout << "6/8"; break;
            case (7000 / 8): cout << "7/8"; break;
        }
    }
};


//задание 4
void z4(){
    zadanie(4);
    Disk disk;
    disk.set_for_disk();
    disk.get_for_disk();
    cout << endl;
}

//задание 5
void z5(){
    zadanie(5);
    Employee_ver2 emp;
    emp.set_ver2();
    emp.get_ver2();
    cout << endl;
}

//задание 6
void z6(){
    zadanie(6);
    Safearay_ver2 sf_2;
    for (int i = 0; i < sf_2.bounds(); i++){
        sf_2[i] = (i + 1) * 10;
    }
    for (int i = 0; i < sf_2.bounds(); i++){
        cout << "Элемент " << i << ": " << sf_2[i] << endl;
    }
    cout << endl;
}

//задание 7
void z7(){
    zadanie(7);
    CountDn c1;
    CountDn c2(100);
    //display
    cout << "c1=" << c1.get_count();
    cout << "\nc2=" << c2.get_count();
    ++c1; ++c1; ++c1; //increment c1
    cout << "\nc1=" << c1.get_count(); //display it
    --c2; --c2; //decrement c2
    cout << "\nc2=" << c2.get_count(); //display it
    CountDn c3 = --c2; //create c3 from c2
    cout << "\nc3=" << c3.get_count() << endl; //display c3
    c2++; c2++;
    cout << "c2=" << c2.get_count() << endl;
    c1--; c1--;
    cout << "c1=" << c1.get_count() << endl;
    cout << endl;
}

//задание 9
void z9(){
    zadanie(9);
    Book book;
    Type type;
    book.set_Book();
    type.set_for_type();
    cout << "\n" << "Для класса Book: ";
    book.get_Book();
    cout << "\n" << "Для класса Type: ";
    type.get_for_type();
    cout << endl;
}

//задание 10
void z10(){
    zadanie(10);
    Executive exec;
    exec.getdata();
    exec.putdata();
    cout << endl;
}

//задание 11
void z11(){
    zadanie(11);
    pair_for_11 pf1, pf1_1, pf2, pf2_1, pf3, pf3_1;
    PairStack ps;
    pf1.x = 10;
    pf1.y = 11;
    ps.push(pf1);
    pf2.x = 20;
    pf2.y = 21;
    ps.push(pf2);
    pf3.x = 30;
    pf3.y = 31;
    ps.push(pf3);
    pf3_1 = ps.pop();
    cout << "pf3_1: " << pf3_1.x << "; " << pf3_1.y << endl;
    pf2_1 = ps.pop();
    cout << "pf2_1: " << pf2_1.x << "; " << pf2_1.y << endl;
    pf1_1 = ps.pop();
    cout << "pf1_1: " << pf1_1.x << "; " << pf1_1.y << endl;
    cout << endl;
}

//задание 12
void z12(){
    zadanie(12);
    Sterfrac sf1, sf2;
    sf1.set();
    sf2.set();
    sf1.add(sf2);
    cout << endl;
    sf1.sub(sf2);
    cout << endl;
    sf1.mul(sf2);
    cout << endl;
    sf1.div(sf2);
    cout << endl;
    cin.get();
    cin.get();
}

int main(){
    z4(); z5(); z6(); z7(); z9(); z10();
    z11(); z12();
}
